#!make -f
#------------------------------------------------------------------------------
# DevinD Makefile
#------------------------------------------------------------------------------
# Project      : DevinD (Dev in Docker)
# Description  : Executable Makefile wrapper to run development tasks across
#                multiple environments (local, Docker, remote via SSH, remote Docker)
#                without modifying the original Makefiles. Acts as a flexible
#                buildflow orchestrator using environment-specific profiles.
# Author       : Oliveira S.
# Version      : NA
# License      : MIT
# Repository   : https://gitlab.com/oliveira.s/devind
#------------------------------------------------------------------------------
# Usage        : ./devind [target]
#------------------------------------------------------------------------------
# Notes:
# - This Makefile is designed to run as an executable script.
# - Supports execution in various environments defined in `devind.yaml`.
#------------------------------------------------------------------------------

DEVIND_MAKEFILE_ENTRY ?= example/hello-world/Makefile
DEVIND_FOLDER ?= .devind
DEVIND_YAML_FILE ?= $(DEVIND_FOLDER)/devind.yaml
YAML_TOOL       := $(DEVIND_FOLDER)/devind_yaml_parser.awk

# Verbosity selection
ifeq ($(V),1)
QUIET := 
else
QUIET := @
endif

DEVIND_GENERATED_HEADER_LINES = \
"\#------------------------------------------------------------------------------" \
"\# This file is auto-generated by DevinD" \
"\#------------------------------------------------------------------------------" \
"\# DO NOT EDIT MANUALLY." \
"\# Changes will be overwritten by ./devind." \
"\# Retained by Makefile using .PRECIOUS to prevent deletion." \
"\#------------------------------------------------------------------------------"

.DEFAULT_GOAL := generate

# Devind Folder Creation
$(DEVIND_FOLDER):
	$(info [CONF] Creating DevinD folder: $@)
	$(QUIET)mkdir $@

# Configure devind
.PHONY: configure-devind
configure-devind: | $(DEVIND_FOLDER)

.PHONY: generate
generate:
	@true
	$(info [CONF] Generating DevinD definition Makefile)

define get_goal_devtarget
  $(shell $(YAML_TOOL) value goals $(1) < $(DEVIND_YAML_FILE))
endef

define get_default_devtarget
  $(shell $(YAML_TOOL) value default_devtarget < $(DEVIND_YAML_FILE))
endef

define get_devtarget_profiles
  $(shell $(YAML_TOOL) list devtargets $(1) profiles < $(DEVIND_YAML_FILE))
endef


# Check GOAL and DEVIND_DEVTARGET for devind-target-runner. Fail early on error.
ifeq ($(filter devind-target-runner,$(MAKECMDGOALS)),devind-target-runner)

    # Validate that GOAL is set
    ifeq ($(strip $(GOAL)),)
        $(error [ERROR] GOAL variable must be set when calling `devind-target-runner`)
    endif

    # Retrieve target's devtarget
    DEVIND_DEVTARGET := $(strip $(call get_goal_devtarget, $(GOAL)))

    ifeq ($(DEVIND_DEVTARGET),)
    # Compute path to environment file
        DEVIND_DEVTARGET := $(strip $(call get_default_devtarget))

        ifeq ($(DEVIND_DEVTARGET),)
            $(error [ERROR] No default devtarget found to set to unmapped `$(GOAL)` goal)
        else
            $(info [CONF] No devtarget found for `$(GOAL)`, setting up default devtarget: `$(DEVIND_DEVTARGET)`)
        endif
    endif

    DEVTARGET:= $(subst dev-,,$(DEVIND_DEVTARGET))
    DEVTARGET_PREREQUISITES:= $(patsubst %,$(DEVIND_FOLDER)/env/profile-%.mk,$(call get_devtarget_profiles,$(DEVTARGET)))
    DEV_TARGET_FILE := $(DEVIND_FOLDER)/env/$(DEVIND_DEVTARGET).mk
endif

# --- Rule to generate .mk files ---
.PRECIOUS: $(DEVIND_FOLDER)/env/global.mk
$(DEVIND_FOLDER)/env/global.mk: $(DEVIND_YAML_FILE)
	$(info [CONF] Generating DevinD Global Makefile: $@)
	$(QUIET){ \
		for line in $(DEVIND_GENERATED_HEADER_LINES); do echo "$$line"; done; \
		echo ""; \
		echo "# Global Variables Definition "; \
		$(YAML_TOOL) vars global < $(DEVIND_YAML_FILE); \
	} > $@

.PRECIOUS: $(DEVIND_FOLDER)/env/profile-%.mk
$(DEVIND_FOLDER)/env/profile-%.mk: $(DEVIND_YAML_FILE)
	$(info [CONF] Generating DevinD Profile Makefile: $@)
	
	$(QUIET){ \
		for line in $(DEVIND_GENERATED_HEADER_LINES); do echo "$$line"; done; \
		echo ""; \
		echo "# \`$*\` Profile Variables Definitions "; \
		$(YAML_TOOL) vars profiles $* < $(DEVIND_YAML_FILE); \
	} > $@

.PRECIOUS: $(DEVIND_FOLDER)/env/dev-%.mk
$(DEVIND_FOLDER)/env/dev-%.mk: $(DEVTARGET_PREREQUISITES) $(DEVIND_YAML_FILE)
	$(info [CONF] Generating DevinD Devtarget Makefile: $@)
	$(QUIET){ \
		for line in $(DEVIND_GENERATED_HEADER_LINES); do echo "$$line"; done; \
		echo ""; \
		echo "# \`$*\` Devtarget Profile Include"; \
		echo "include $(DEVTARGET_PREREQUISITES)"; \
		echo "";\
		echo "# \`$*\` Devtarget Variables Definitions "; \
		$(YAML_TOOL) vars devtargets $* var < $(DEVIND_YAML_FILE); \
	} > $@

# --- Target runner for DevTarget ---
# This rule dynamically runs the target in the selected environment profile.
.PHONY: devind-target-runner
devind-target-runner: $(DEVIND_FOLDER)/env/global.mk $(DEV_TARGET_FILE)
	$(eval include $^)

	$(info [EXEC] Running make target `$(GOAL)` in devtarget: $(DEVIND_DEVTARGET))
	$(QUIET) $(CMD_PREFIX) "$(GOAL)" $(CMD_SUFFIX)


# Rule to run goals on the configured dev target
# Each goal runs the internal target runner, setting necessary variables and invoking the appropriate profile
%:
	$(QUIET) $(MAKE) -f $(firstword $(MAKEFILE_LIST)) devind-target-runner GOAL=$@ \
		DEVIND_MAKEFILE_ENTRY=$(DEVIND_MAKEFILE_ENTRY) \
		DEVIND_FOLDER=$(DEVIND_FOLDER)
