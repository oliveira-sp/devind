#!make -f
#------------------------------------------------------------------------------
# DevinD Makefile
#------------------------------------------------------------------------------
# Project      : DevinD (Dev in Docker)
# Description  : Executable Makefile wrapper to run development tasks across
#                multiple environments (local, Docker, remote via SSH, remote Docker)
#                without modifying the original Makefiles. Acts as a flexible
#                buildflow orchestrator using environment-specific profiles.
# Author       : Oliveira S.
# Version      : 0.1
# License      : MIT
# Repository   : https://gitlab.com/oliveira.s/devind
#------------------------------------------------------------------------------
# Usage        : ./devind [target]
#------------------------------------------------------------------------------
# Notes:
# - This Makefile is designed to run as an executable script.
# - Supports execution in various environments defined in `devind.yaml`.
#------------------------------------------------------------------------------

# Including DevinD configuration ----------------------------------------------
ifneq ("$(wildcard .devindrc)","")
include .devindrc
endif

# Configuration ---------------------------------------------------------------
DEVIND_MAKEFILE_ENTRY 		?= Makefile
DEVIND_FOLDER 				?= .devind
DEVIND_GENERATE_FOLDER		?= $(DEVIND_FOLDER)/generated
DEVIND_YAML_FILE 			?= devind.yaml
YAML_TOOL       			?= $(DEVIND_FOLDER)/devind_yaml_parser.awk

# Verbosity -------------------------------------------------------------------
ifeq ($(V),1)
QUIET := 
else
QUIET := @
endif

# Generated Header (for .mk files) --------------------------------------------
define DEVIND_GENERATED_HEADER_LINES
"#------------------------------------------------------------------------------" \
"# This file is auto-generated by DevinD" \
"#------------------------------------------------------------------------------" \
"# DO NOT EDIT MANUALLY." \
"# Changes will be overwritten by ./devind." \
"# Retained by Makefile using .PRECIOUS to prevent deletion." \
"#------------------------------------------------------------------------------"
endef

# Rules: DevinD Entry Points --------------------------------------------------
$(DEVIND_FOLDER) $(DEVIND_GENERATE_FOLDER): # Devind Folder Creation
	$(info [CONF] Creating DevinD folder: $@)
	$(QUIET)mkdir -p $@

.PHONY: configure-devind
configure-devind:
	$(QUIET)echo "[CONF] Starting DevinD interactive environment configuration..."
	$(QUIET){ \
	if [ -f .devindrc ]; then \
		read -p "> \`.devindrc\` already exists! Do you want to overwrite it? (y/n): " overwrite; \
		overwrite=$${overwrite}; \
		if [ "$$overwrite" != "y" ]; then \
			echo "[WARN] Aborting configuration. \`.devindrc\` not modified."; \
			exit 1; \
		fi; \
		echo "[INFO] Overwriting \`.devindrc\` ..."; \
	fi;\
		read -p "> Enter the folder name for DevinD (default: $(DEVIND_FOLDER)): " devind_folder; \
		devind_folder=$${devind_folder:-$(DEVIND_FOLDER)}; \
		\
		read -p "> Enter the path to the Makefile (default: $(DEVIND_MAKEFILE_ENTRY)): " devind_makefile_entry; \
		devind_makefile_entry=$${devind_makefile_entry:-$(DEVIND_MAKEFILE_ENTRY)}; \
		\
		read -p "> Enter the path to the YAML file (default: $$devind_folder/devind.yaml): " devind_yaml_file; \
		devind_yaml_file=$${devind_yaml_file:-$$devind_folder/devind.yaml}; \
		\
		echo "[CONF] Writing to .devindrc..."; \
		{ \
			echo "# Auto-Generated DevinD Configuration File"; \
			echo "DEVIND_MAKEFILE_ENTRY ?= $$devind_makefile_entry"; \
			echo "DEVIND_FOLDER ?= $$devind_folder"; \
			echo "DEVIND_YAML_FILE ?= $$devind_yaml_file"; \
		} > .devindrc ;\
	};
	$(QUIET)echo "[INFO] .devindrc written successfully."


.PHONY: force-gen
force-gen: ## Force Makefiles Re-Generation by updating timestamp of yaml config file
	$(info [CONF] Forcing All Makefiles Re-Generation.)
	$(QUIET)touch $(DEVIND_YAML_FILE)

.PHONY: clean-gen
clean-gen: ## Cleaning All Generated Makefiles
	$(info [CLEAN] Removing All Generated Makefiles.)
	$(QUIET) rm -rf $(DEVIND_GENERATE_FOLDER)/*.mk

.PHONY: profiles
profiles: ## List all profiles defined the YAML config file
	$(QUIET)echo DevinD Profiles available:
	$(QUIET)for line in $(call get_profiles); do echo "  $$line"; done;

.PHONY: devtargets
devtargets: ## List all devtargets defined the YAML config file
	$(QUIET)echo DevinD Devtargets available:
	$(QUIET)for line in $(call get_devtargets); do echo "  $$line"; done;

.PHONY: help
help: ## Display this help
	$(QUIET)echo Usage: ./devind [options] [target]
	$(QUIET)echo Devind Targets:
	$(QUIET)grep -E '^[a-zA-Z_0-9%-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[34m  %-30s\033[0m %s\n", $$1, $$2}'


# YAML Query Helpers ----------------------------------------------------------
define get_goal_devtarget
  $(shell $(YAML_TOOL) value goals $(1) < $(DEVIND_YAML_FILE))
endef

define get_default_devtarget
  $(shell $(YAML_TOOL) value default_devtarget < $(DEVIND_YAML_FILE))
endef

define get_devtarget_profiles
  $(shell $(YAML_TOOL) list devtargets $(1) profiles < $(DEVIND_YAML_FILE))
endef

define get_profiles
  $(shell $(YAML_TOOL) node profiles < $(DEVIND_YAML_FILE))
endef

define get_devtargets
  $(shell $(YAML_TOOL) node devtargets < $(DEVIND_YAML_FILE))
endef

# DevTarget Evaluation (only evaluated when devind-target-runner is called) ---
ifeq (devind-target-runner,$(filter devind-target-runner,$(MAKECMDGOALS)))

  ifeq ($(strip $(GOAL)),)
    $(error [ERROR] GOAL variable must be set for `devind-target-runner`)
  endif

  DEVIND_DEVTARGET := $(strip $(call get_goal_devtarget,$(GOAL)))

  ifeq ($(DEVIND_DEVTARGET),)
    DEVIND_DEVTARGET := $(strip $(call get_default_devtarget))

    ifeq ($(DEVIND_DEVTARGET),)
      $(error [ERROR] No devtarget defined and no default fallback found for goal `$(GOAL)`)
    else
      $(info [CONF] Using default devtarget: `$(DEVIND_DEVTARGET)` for goal `$(GOAL)`)
    endif
  endif

  DEVTARGET := $(subst dev-,,$(DEVIND_DEVTARGET))
  DEVTARGET_PROFILES := $(call get_devtarget_profiles,$(DEVTARGET))
  DEVTARGET_PROFILE_FILES := $(patsubst %,$(DEVIND_GENERATE_FOLDER)/profile-%.mk,$(DEVTARGET_PROFILES))
  DEV_TARGET_FILE := $(DEVIND_GENERATE_FOLDER)/$(DEVIND_DEVTARGET).mk
endif

# Rule to Generate: Global Variable Makefile (global.mk) ----------------
$(DEVIND_GENERATE_FOLDER)/*.mk: | $(DEVIND_GENERATE_FOLDER)

.PRECIOUS: $(DEVIND_GENERATE_FOLDER)/global.mk
$(DEVIND_GENERATE_FOLDER)/global.mk: $(DEVIND_YAML_FILE)
	$(info [GEN] Generating DevinD Global Makefile: $@)
	$(QUIET){ \
		for line in $(DEVIND_GENERATED_HEADER_LINES); do echo "$$line"; done; \
		echo ""; \
		echo "# Global Variables Definition "; \
		$(YAML_TOOL) vars global < $(DEVIND_YAML_FILE); \
	} > $@

# Rule to Generate: Profile Variable Makefile (profile-%.mk) ----------------
.PRECIOUS: $(DEVIND_GENERATE_FOLDER)/profile-%.mk
$(DEVIND_GENERATE_FOLDER)/profile-%.mk: $(DEVIND_YAML_FILE)
	$(info [GEN] Generating DevinD Profile Makefile: $@)
	
	$(QUIET){ \
		for line in $(DEVIND_GENERATED_HEADER_LINES); do echo "$$line"; done; \
		echo ""; \
		echo "# Profile \`$*\` Variables Definitions "; \
		$(YAML_TOOL) vars profiles $* < $(DEVIND_YAML_FILE); \
	} > $@

# Rule to Generate: Devtarget Makefile (dev-%.mk) -----------------------------
.PRECIOUS: $(DEVIND_GENERATE_FOLDER)/dev-%.mk
$(DEVIND_GENERATE_FOLDER)/dev-%.mk: $(DEVTARGET_PROFILE_FILES) $(DEVIND_YAML_FILE)
	$(info [GEN] Generating DevinD Devtarget Makefile: $@)
	$(QUIET){ \
		for line in $(DEVIND_GENERATED_HEADER_LINES); do echo "$$line"; done; \
		echo ""; \
		echo "# Devtarget \`$*\` Profile Includes"; \
		echo "include $(DEVTARGET_PROFILE_FILES)"; \
		echo "";\
		echo "# Devtarget \`$*\` Variables Definitions "; \
		$(YAML_TOOL) vars devtargets $* var < $(DEVIND_YAML_FILE); \
	} > $@


# Target Runner (includes all environment data and runs target) ---------------
.PHONY: devind-target-runner
devind-target-runner: $(DEVIND_GENERATE_FOLDER)/global.mk $(DEV_TARGET_FILE)
	$(eval include $^)
	$(info [EXEC] Running make target `$(GOAL)` in devtarget: $(DEVIND_DEVTARGET))
	$(QUIET) $(CMD_PREFIX) "$(GOAL)" $(CMD_SUFFIX)


# Target Dispatcher: Default Goal Passthrough ---------------------------------
%:
	$(QUIET) $(MAKE) -f $(firstword $(MAKEFILE_LIST)) devind-target-runner GOAL=$@ \
		DEVIND_MAKEFILE_ENTRY=$(DEVIND_MAKEFILE_ENTRY) \
		DEVIND_FOLDER=$(DEVIND_FOLDER)
