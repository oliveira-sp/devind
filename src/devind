#!/usr/bin/make -f
#------------------------------------------------------------------------------
# DevinD Makefile
#------------------------------------------------------------------------------
# Project      : DevinD (Dev in Docker)
# Description  : Executable Makefile wrapper to run development tasks across
#                multiple environments (local, Docker, remote via SSH, remote Docker)
#                without modifying the original Makefiles. Acts as a flexible
#                buildflow orchestrator using environment-specific profiles.
# Author       : Oliveira S.
# Version      : __VERSION__
# License      : MIT
# Repository   : https://gitlab.com/oliveira.s/devind
#------------------------------------------------------------------------------
# Usage        : ./devind [target]
#------------------------------------------------------------------------------
# Notes:
# - This Makefile is designed to run as an executable script.
# - Supports execution in various environments defined in `devind.yaml`.
#------------------------------------------------------------------------------

# Including DevinD configuration ----------------------------------------------
DEVINDRC_FILE	:= .devindrc
include $(wildcard $(DEVINDRC_FILE))

# Configuration ---------------------------------------------------------------
DEVIND_MAKEFILE_ENTRY 		?= Makefile
DEVIND_FOLDER 				?= .devind
DEVIND_GENERATE_FOLDER		?= $(DEVIND_FOLDER)/generated
DEVIND_YAML_FILE 			?= devind.yaml

define YAML_AWK_PARSER_CODE
__YAML_MINIMIZED_PARSER_CODE__
endef

YAML_TOOL := awk '$(YAML_AWK_PARSER_CODE)'

# Verbosity -------------------------------------------------------------------
# Suppress command output unless V=1
QUIET ?= $(if $(filter 1,$(V)),,@)
# Logging definitions ---------------------------------------------------------
# Enable colored output by default
COLOR_ENABLED ?= 1
ESC := \033

# color_tag: return colored tag if enabled, else plain tag
define color_tag # usage: $(call color_tag,<ANSI_color_code>,<tag_text>)
$(if $(filter 1,$(COLOR_ENABLED)),[$(ESC)[$(1)m$(2)$(ESC)[0m],[$(2)])
endef

# Log tags with colors or plain fallback
ERROR_TAG := $(call color_tag,38;5;160,ERROR)
WARN_TAG  := $(call color_tag,38;5;220,WARN)
INFO_TAG  := [INFO]
DEBUG_TAG := $(call color_tag,38;5;81,DEBUG)
CONF_TAG  := $(call color_tag,38;5;252,CONF)
GEN_TAG   := $(call color_tag,38;5;252,GEN)
EXEC_TAG  := $(call color_tag,38;5;33,EXEC)
CLEAN_TAG := $(call color_tag,38;5;252,CLEAN)

# log: print a log message, optional no newline if $3 = "n"
define log # usage: $(call log,<tag>,<message>,<optional_no_newline_flag>)
if [ "$3" = "n" ]; then \
  printf '%b %s' "$1" "$2"; \
else \
  printf '%b %s\n' "$1" "$2"; \
fi
endef

# log_in_make: print log; if tag is ERROR_TAG, print to stderr and abort Make
define log_in_make # usage: $(call log_in_make,<tag>,<message>,<optional_no_newline_flag>)
$(if $(filter $1,$(ERROR_TAG)),\
  $(shell $(call log,$1,$2,$3) >&2) $(error Fatal error detected, aborting Make),\
  $(shell $(call log,$1,$2,$3)))
endef

# Generated Header (for .mk files) --------------------------------------------
define DEVIND_GENERATED_HEADER_LINES
"#------------------------------------------------------------------------------" \
"# This file is auto-generated by DevinD" \
"#------------------------------------------------------------------------------" \
"# DO NOT EDIT MANUALLY." \
"# Changes will be overwritten by ./devind." \
"# Retained by Makefile using .PRECIOUS to prevent deletion." \
"#------------------------------------------------------------------------------"
endef

# Rules: DevinD Folders Creation ----------------------------------------------
$(DEVIND_FOLDER) $(DEVIND_GENERATE_FOLDER): # Devind Folder Creation
	$(QUIET)$(call log,$(CONF_TAG),Creating DevinD folder: $@)
	$(QUIET)mkdir -p $@

# Rule: .devindrc Overwrite Validation ----------------------------------------
.PHONY: overwrite-devindrc
overwrite-devindrc:
	$(QUIET){ \
	if [ -f $(DEVINDRC_FILE) ]; then \
		$(call log,$(WARN_TAG),\`$(DEVINDRC_FILE)\` already exists! Do you want to overwrite it? (y/n): ,n); \
		read overwrite; \
		overwrite=$${overwrite}; \
		if [ "$$overwrite" != "y" ]; then \
			$(call log,$(WARN_TAG),Aborting configuration. \`$(DEVINDRC_FILE)\` not modified.); \
			exit 1; \
		fi; \
		$(call log,$(INFO_TAG),Overwriting \`$(DEVINDRC_FILE)\` ...); \
	fi; \
	}

# Rules: DevinD Entry Points --------------------------------------------------
.PHONY: configure-devind
configure-devind: overwrite-devindrc ## Interactive DevinD Configuration (writting .devindrc file)
	$(QUIET)$(call log,$(CONF_TAG),Starting DevinD interactive environment configuration...)
	$(QUIET){ \
		$(call log,$(CONF_TAG),Enter the folder name for DevinD (default: $(DEVIND_FOLDER)): ,n); \
		read devind_folder; \
		devind_folder=$${devind_folder:-$(DEVIND_FOLDER)}; \
		\
		$(call log,$(CONF_TAG),Enter the path to the Makefile (default: $(DEVIND_MAKEFILE_ENTRY)): ,n); \
		read devind_makefile_entry; \
		devind_makefile_entry=$${devind_makefile_entry:-$(DEVIND_MAKEFILE_ENTRY)}; \
		\
		$(call log,$(CONF_TAG),Enter the path to the YAML file (default: $(DEVIND_YAML_FILE)): ,n); \
		read devind_yaml_file; \
		devind_yaml_file=$${devind_yaml_file:-$(DEVIND_YAML_FILE)}; \
		\
		{ \
			echo "# Auto-Generated DevinD Configuration File"; \
			echo "DEVIND_MAKEFILE_ENTRY ?= $$devind_makefile_entry"; \
			echo "DEVIND_FOLDER ?= $$devind_folder"; \
			echo "DEVIND_YAML_FILE ?= $$devind_yaml_file"; \
		} > $(DEVINDRC_FILE) ;\
	};
	$(QUIET)$(call log,$(INFO_TAG),\`$(DEVINDRC_FILE)\` written successfully.)

.PHONY: force-gen
force-gen: ## Force Makefiles Re-Generation by updating timestamp of yaml config file
	$(QUIET)$(call log,$(CONF_TAG),Forcing all Makefiles Re-Generation.)
	$(QUIET)touch $(DEVIND_YAML_FILE)

.PHONY: clean-gen
clean-gen: ## Cleaning All Generated Makefiles
	$(QUIET)$(call log,$(CLEAN_TAG),Removing All Generated Makefiles.)
	$(QUIET) rm -rf $(DEVIND_GENERATE_FOLDER)/*.mk

.PHONY: profiles
profiles: ## List all profiles defined in the YAML config file
	$(QUIET)echo DevinD Profiles available:
	$(QUIET)for line in $(call get_profiles); do echo "  $$line"; done;

.PHONY: devtargets
devtargets: ## List all devtargets defined in the YAML config file
	$(QUIET)echo DevinD Devtargets available:
	$(QUIET)for line in $(call get_devtargets); do echo "  $$line"; done;

.PHONY: help
help: ## Display this help
	$(QUIET)echo "Usage: ./devind [options] [target]"
	$(QUIET)echo "Devind Targets:"
	$(QUIET)grep -hE '^[a-zA-Z0-9_.%/-]+:.*## ' $(MAKEFILE_LIST) | sort | \
		awk 'BEGIN { FS = ":.*## " } { printf "\033[34m  %-30s\033[0m %s\n", $$1, $$2 }'

# YAML Query Helpers ----------------------------------------------------------
# get_goal_value: get devtarget and eventual profiles mapped to a given goal from YAML
define get_goal_value # usage: $(call get_goal_value,<goal>)
  $(shell $(YAML_TOOL) value goals $(1) < $(DEVIND_YAML_FILE))
endef

# get_default_devtarget: get default devtarget from YAML root
define get_default_devtarget # usage: $(call get_default_devtarget)
  $(shell $(YAML_TOOL) value default_devtarget < $(DEVIND_YAML_FILE))
endef

# get_devtarget_profiles: list profiles associated with a devtarget
define get_devtarget_profiles # usage: $(call get_devtarget_profiles,<devtarget>)
  $(shell $(YAML_TOOL) list devtargets $(1) profiles < $(DEVIND_YAML_FILE))
endef

# get_profiles: list all profiles defined in YAML
define get_profiles # usage: $(call get_profiles)
  $(shell $(YAML_TOOL) node profiles < $(DEVIND_YAML_FILE))
endef

# get_devtargets: list all devtargets defined in YAML
define get_devtargets # usage: $(call get_devtargets)
  $(shell $(YAML_TOOL) node devtargets < $(DEVIND_YAML_FILE))
endef

# DevTarget Evaluation Logic ---------------------------------------------------
ifeq (devind-target-runner,$(filter devind-target-runner,$(MAKECMDGOALS)))

  GOAL_VALUE := $(strip $(call get_goal_value,$(GOAL)))
  GOAL_PROFILES := $(filter-out dev-%,$(GOAL_VALUE))
  GOAL_DEVTARGET := $(firstword $(filter-out $(GOAL_PROFILES),$(GOAL_VALUE)))

  ifeq ($(GOAL_DEVTARGET),)
    GOAL_DEVTARGET := $(strip $(call get_default_devtarget))

    ifeq ($(GOAL_DEVTARGET),)
		_ := $(call log_in_make,$(ERROR_TAG),No devtarget defined and no default fallback found for goal \`$(GOAL)\`)
    else
		_ := $(call log_in_make,$(CONF_TAG),Using default devtarget: \`$(GOAL_DEVTARGET)\` for goal \`$(GOAL)\`)
    endif
  endif

  DEVTARGET := $(subst dev-,,$(GOAL_DEVTARGET))
  DEVTARGET_PROFILES := $(call get_devtarget_profiles,$(DEVTARGET)) $(GOAL_PROFILES)

  DEVTARGET_PROFILE_FILES := $(patsubst %,$(DEVIND_GENERATE_FOLDER)/profile-%.mk,$(DEVTARGET_PROFILES))
  GOAL_DEVTARGET_FILE := $(DEVIND_GENERATE_FOLDER)/$(GOAL_DEVTARGET).mk
  GOAL_PROFILE_FILES := $(patsubst %,$(DEVIND_GENERATE_FOLDER)/profile-%.mk,$(GOAL_PROFILES))
  GOAL_FILE := $(DEVIND_GENERATE_FOLDER)/goal-$(GOAL).mk
endif

# Rule to Generate: Global Variable Makefile (global.mk) ----------------------
.PRECIOUS: $(DEVIND_GENERATE_FOLDER)/global.mk
$(DEVIND_GENERATE_FOLDER)/global.mk: $(DEVIND_YAML_FILE) | $(DEVIND_GENERATE_FOLDER)
	$(QUIET)$(call log,$(GEN_TAG),Generating DevinD Global Makefile: $@)
	$(QUIET){ \
		for line in $(DEVIND_GENERATED_HEADER_LINES); do echo "$$line"; done; \
		echo ""; \
		echo "# Global Variables Definitions"; \
		$(YAML_TOOL) vars global < $(DEVIND_YAML_FILE); \
	} > $@

# Rule to Generate: Profile Variable Makefile (profile-%.mk) ------------------
.PRECIOUS: $(DEVIND_GENERATE_FOLDER)/profile-%.mk
$(DEVIND_GENERATE_FOLDER)/profile-%.mk: $(DEVIND_YAML_FILE)
	$(QUIET)$(call log,$(GEN_TAG),Generating DevinD Profile Makefile: $@)
	$(QUIET){ \
		for line in $(DEVIND_GENERATED_HEADER_LINES); do echo "$$line"; done; \
		echo ""; \
		echo "# Profile \`$*\` Variables Definitions"; \
		$(YAML_TOOL) vars profiles $* < $(DEVIND_YAML_FILE); \
	} > $@

# Rule to Generate: Devtarget Makefile (dev-%.mk) -----------------------------
.PRECIOUS: $(DEVIND_GENERATE_FOLDER)/dev-%.mk
$(DEVIND_GENERATE_FOLDER)/dev-%.mk: $(DEVTARGET_PROFILE_FILES) $(DEVIND_YAML_FILE)
	$(QUIET)$(call log,$(GEN_TAG),Generating DevinD Devtarget Makefile: $@)
	$(QUIET){ \
		for line in $(DEVIND_GENERATED_HEADER_LINES); do echo "$$line"; done; \
		echo ""; \
		echo "# Devtarget \`$*\` Profiles Includes"; \
		echo "include $(DEVTARGET_PROFILE_FILES)"; \
		echo "";\
		echo "# Devtarget \`$*\` Variables Definitions"; \
		$(YAML_TOOL) vars devtargets $* var < $(DEVIND_YAML_FILE); \
	} > $@


# Target Runner (includes all environment data and runs target) ---------------
.PHONY: devind-target-runner
devind-target-runner: $(DEVIND_GENERATE_FOLDER)/global.mk $(GOAL_DEVTARGET_FILE) $(GOAL_PROFILE_FILES) 
	$(eval include $^ )
	$(QUIET)$(call log,$(DEBUG_TAG),Including: $^)
	$(QUIET)$(call log,$(EXEC_TAG),Running make target \`$(GOAL)\` in devtarget: $(GOAL_DEVTARGET))
	$(QUIET) $(CMD_PREFIX) $(CMD_EXEC) $(CMD_SUFFIX)
	$(QUIET)echo

# Target Dispatcher: Default Goal Passthrough ---------------------------------
%:
	$(QUIET) $(MAKE) -f $(firstword $(MAKEFILE_LIST)) devind-target-runner GOAL=$@
